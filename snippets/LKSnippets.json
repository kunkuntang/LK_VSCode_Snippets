{
  "Create Lk Get Service": {
    "prefix": "LkCreateGetService",
    "body": [
      "export function ${1:InterfaceName}Service(params: ${1}ParamsModel) {",
      "  return get('${2:url}', params, {",
      "     baseURL: process.env,",
      "   }).then((res) => {",
      "      return new ${3:ContainerEntity}(res.data);",
      "  });",
      "}"
    ],
    "description": "Create Lk Get Service"
  },
  "Create Lk Post Service": {
    "prefix": "LkCreatePostService",
    "body": [
      "export function ${1:InterfaceName}Service(params: ${1}ParamsModel) {",
      "  return post('${3:url}', params, {",
      "     baseURL: process.env,",
      "   }).then((res) => {",
      "      return new ${4:ContainerEntity}(res.data);",
      "  });",
      "}"
    ],
    "description": "Create Lk Post Service"
  },
  "Create Lk Delete Service": {
    "prefix": "LkCreateDeleteService",
    "body": [
      "export function ${1:InterfaceName}Service(params: ${1}ParamsModel) {",
      "  return _delete('${3:url}', params, {",
      "     baseURL: process.env,",
       " }).then((res) => {",
      "      return new ${4:ContainerEntity}(res.data);",
      "  });",
      "}"
    ],
    "description": "Create Lk Delete Service"
  },
  "Create Lk Put Service": {
    "prefix": "LkCreatePutService",
    "body": [
      "export function ${1:InterfaceName}Service(params: ${1}ParamsModel) {",
      "  return put('${3:url}', params, {",
      "     baseURL: process.env,",
      "  }).then((res) => {",
      "      return new ${4:ContainerEntity}(res.data);",
      "  });",
      "}"
    ],
    "description": "Create Lk Put Service"
  },
  "Create Lk Patch Service": {
    "prefix": "LkCreatePatchService",
    "body": [
      "export function ${1:InterfaceName}Service(params: ${1}ParamsModel) {",
      "  return patch('${3:url}', params, {",
      "     baseURL: process.env",
      "  }).then((res) => {",
      "      return new ${4:ContainerEntity}(res.data);",
      "  });",
      "}"
    ],
    "description": "Create Lk Patch Service"
  },
  "Create Lk Update Service": {
    "prefix": "LkCreateUpdateService",
    "body": [
      "export function ${1:InterfaceName}Service(params: ${1}ParamsModel) {",
      "  return update('${3:url}', params).then((res) => {",
      "      return new ${4:ContainerEntity}(res.data);",
      "  });",
      "}"
    ],
    "description": "Create Lk Update Service"
  },
  "LKCreate MutationAction Snippets": {
    "prefix": "LKCreateMutationActionSnippets",
    "body": [
      "/** ${1} */",
      "@MutationAction({ mutate: ['${2}'] })",
      "async ${3}ServiceAction(Query: string) {",
      " const ${4} = await ${3}Service(Query);",
      "  return { ${2}: ${4}.data }",
      "}"
    ]
  },
  "LK Create Store List Data": {
    "prefix": "LKCreateStoreListData",
    "body": [
      "${1:列表变量名}SD = BaseServiceModel<${2:数据模型名称}>();;",
      "",
      "get ${1}() {",
      "  if (",
      "    this.${1}SD.isResolved &&",
      "    this.${1}SD.value?.code === 0 &&",
      "    this.${1}SD.value.data !== undefined",
      "  ) {",
      "    return this.${1}SD.value.data;",
      "  } else {",
      "    return [];",
      "  }",
      "}",
      "",
      "@MutationAction({ mutate: [\"${1}SD\"] })",
      "async get${3:开头大写的列表变量名}Action(",
      "  params: Parameters<typeof Get${3}Service>[0]",
      ") {",
      "  return {",
      "    ${1}SD: BaseServiceModel(Get${3}Service(params)),",
      "  };",
      "}"
    ],
    "description": "在store中创建一个列表数据对象"
  }
}