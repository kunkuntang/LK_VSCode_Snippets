{
  "Create Lk Get Service": {
    "prefix": "LkCreateGetService",
    "body": [
      "export function ${1:InterfaceName}Service(params: ${1}ParamsModel) {",
      "  return get('${2:url}', params, {",
      "     baseURL: SystemStore.tenantApiUrl,",
      "   }).then((res) => {",
      "      return new ${3:ContainerModel}(res.data);",
      "  });",
      "}"
    ],
    "description": "Create Lk Get Service"
  },
  "Create Lk Post Service": {
    "prefix": "LkCreatePostService",
    "body": [
      "export function ${1:InterfaceName}Service(params: ${1}ParamsModel) {",
      "  return post('${3:url}', params, {",
      "     baseURL: SystemStore.tenantApiUrl,",
      "   }).then((res) => {",
      "      return new ${4:ContainerModel}(res.data);",
      "  });",
      "}"
    ],
    "description": "Create Lk Post Service"
  },
  "Create Lk Delete Service": {
    "prefix": "LkCreateDeleteService",
    "body": [
      "export function ${1:InterfaceName}Service(params: ${1}ParamsModel) {",
      "  return _delete('${3:url}', params, {",
      "     baseURL: SystemStore.tenantApiUrl,",
       " }).then((res) => {",
      "      return new ${4:ContainerModel}(res.data);",
      "  });",
      "}"
    ],
    "description": "Create Lk Delete Service"
  },
  "Create Lk Put Service": {
    "prefix": "LkCreatePutService",
    "body": [
      "export function ${1:InterfaceName}Service(params: ${1}ParamsModel) {",
      "  return put('${3:url}', params, {",
      "     baseURL: SystemStore.tenantApiUrl,",
      "  }).then((res) => {",
      "      return new ${4:ContainerModel}(res.data);",
      "  });",
      "}"
    ],
    "description": "Create Lk Put Service"
  },
  "Create Lk Patch Service": {
    "prefix": "LkCreatePatchService",
    "body": [
      "export function ${1:InterfaceName}Service(params: ${1}ParamsModel) {",
      "  return patch('${3:url}', params, {",
      "     baseURL: SystemStore.tenantApiUrl",
      "  }).then((res) => {",
      "      return new ${4:ContainerModel}(res.data);",
      "  });",
      "}"
    ],
    "description": "Create Lk Patch Service"
  },
  "Create Lk Update Service": {
    "prefix": "LkCreateUpdateService",
    "body": [
      "export function ${1:InterfaceName}Service(params: ${1}ParamsModel) {",
      "  return update('${3:url}', params).then((res) => {",
      "      return new ${4:ContainerModel}(res.data);",
      "  });",
      "}"
    ],
    "description": "Create Lk Update Service"
  },
  "HLCreate FormSubmit Snippets": {
    "prefix": "HLCreateFormSubmitSnippets",
    "body": [
      "this.${1:formRef}.validateFields((err, values: ${2:接口数据模型对象) => {",
      "  if (!err) {",
      "    const formData = this.${1:formRef}.viewModel.InputDataModel as ${3:表单字段数据模型对象};",
      "    const addParams = BaseFormFields.formFieldsToData<${3:表单字段数据模型对象}, ${2:接口数据模型对象>(${3:表单字段数据模型对象}, formData)",
      "    // 调用接口",
      "    ${0}",
      "  }",
      "})"
    ],
    "description": "HLCreate FormSubmit Snippets"
  },
  "HLCreate Enum Snippets": {
    "prefix": "LkCreateEnumSnippets",
    "body": [
      "export class ${1:EnumName} extends BaseEnum<${2:codeType}, ${3:valueType}> {",
      "  static ${4:EnumProperty} = new BaseEnum(${5:code}, ${6:value});",
      "}"
    ],
    "description": "LkCreate Enum Snippets（创建一个枚举类）"
  },
  "HLCreate MutationAction Snippets": {
    "prefix": "LKCreateMutationActionSnippets",
    "body": [
      "/** ${1} */",
      "@MutationAction({ mutate: ['${2}'] })",
      "async ${3}ServiceAction(Query: string) {",
      " const ${4} = await ${3}Service(Query);",
      "  return { ${2}: ${4}.data }",
      "}"
    ]
  }
}